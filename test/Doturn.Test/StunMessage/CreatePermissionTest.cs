using System;
using Xunit;

namespace Doturn.StunMessage.Test
{
    public class CreatePermissionTest
    {
        private readonly byte[] transactionId = new byte[] { 0x39, 0x50, 0x4d, 0x4b, 0x64, 0x63, 0x79, 0x30, 0x6e, 0x6c, 0x69, 0x58 };
        private readonly byte[] createPermissionRequestByteArray = new byte[] {
            0x00, 0x12, 0x00, 0x08, 0x00, 0x01, 0x6F, 0x32, 0x5E, 0x12, 0xA4, 0x43, // XorPeerAddress 127.0.0.1:20000
            0x00, 0x06, 0x00, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6E, 0x61, 0x6D, 0x65, // Username username
            0x00, 0x14, 0x00, 0x0B, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x00, // Realm example.com
            0x00, 0x15, 0x00, 0x10, 0x68, 0x6F, 0x32, 0x79, 0x64, 0x77, 0x35, 0x71, 0x65, 0x65, 0x71, 0x73, 0x67, 0x61, 0x73, 0x7A, // Nonce ho2ydw5qeeqsgasz
            0x00, 0x08, 0x00, 0x14, 0x8D, 0xA4, 0x75, 0x94, 0xAF, 0x6B, 0x72, 0xB2, 0x55, 0xD2, 0x92, 0x55, 0xF9, 0x58, 0xB5, 0x82, 0xDB, 0x87, 0x78, 0x6D, // MessageIntegrity
        };
        private readonly byte[] createPermissionSuccessResponseByteArray = new byte[] {
            0x01, 0x08, 0x00, 0x30, 0x21, 0x12, 0xa4, 0x42, 0x39, 0x50, 0x4d, 0x4b, 0x64, 0x63, 0x79, 0x30, 0x6e, 0x6c, 0x69, 0x58, // header
            0x80, 0x22, 0x00, 0x06, 0x44, 0x6F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Software
            0x00, 0x08, 0x00, 0x14, 0x7A, 0x59, 0x8A, 0x2C, 0x1E, 0xE6, 0x5B, 0x50, 0x70, 0x14, 0xB7, 0x1B, 0xB2, 0x7F, 0x82, 0x5D, 0xE7, 0xE9, 0x96, 0x82, // MessageIntegrity
            0x80, 0x28, 0x00, 0x04, 0xE0, 0x5E, 0x8C, 0xAD // Fingerprint
        };

        private readonly byte[] createPermissionErrorResponseByteArray = new byte[] {
            0x01, 0x18, 0x00, 0x18, 0x21, 0x12, 0xa4, 0x42, 0x39, 0x50, 0x4d, 0x4b, 0x64, 0x63, 0x79, 0x30, 0x6e, 0x6c, 0x69, 0x58, // header
            0x80, 0x22, 0x00, 0x06, 0x44, 0x6F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Software
            0x80, 0x28, 0x00, 0x04, 0x83, 0x38, 0x9E, 0x39 // Fingerprint
        };

        [Fact]
        public void Parse_And_Convert_To_ByteArray_createPermissionRequest()
        {
            var createPermissionRequest = new CreatePermission(this.createPermissionRequestByteArray);
            var convertedcreatePermissionRequestByteArray = createPermissionRequest.ToBytes();
            var xorPeerAddress = (StunAttribute.XorPeerAddress)createPermissionRequest.attributes[0];
            Assert.Equal(this.createPermissionRequestByteArray, convertedcreatePermissionRequestByteArray);
        }

        [Fact]
        public void CreateSuccessResponse()
        {
            var successResponseByteArray = CreatePermission.CreateSuccessResponse(this.transactionId);
            Assert.Equal(this.createPermissionSuccessResponseByteArray, successResponseByteArray);
        }

        [Fact]
        public void CreateErrorResponse()
        {
            var errorResponseByteArray = CreatePermission.CreateErrorResponse(this.transactionId);
            Assert.Equal(this.createPermissionErrorResponseByteArray, errorResponseByteArray);
        }
    }
}